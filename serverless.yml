# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: prorokxp
# "service" is the name of this project. This will also be added to your AWS resource names.
service: stop-waiting

stages:
  default:
    params:
      tableName: "queue-table-${sls:stage}" # Main queue table
      sequenceTableName: "sequence-table-${sls:stage}" # Sequence table for auto-incrementing order numbers

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [QueueTable, Arn]
            - Fn::GetAtt: [SequenceTable, Arn] # Allow access to the sequence table
  environment:
    QUEUE_TABLE: ${param:tableName} # Environment variable for the queue table name
    SEQUENCE_TABLE: ${param:sequenceTableName} # Environment variable for the sequence table name

# functions:
#   graphql:
#     handler: src/handlers/paymentHandler.handler
#     events:
#       - http:
#           path: graphql
#           method: post

#   adyenCallback:
#     handler: src/handlers/adyenCallbackHandler.handler
#     events:
#       - http:
#           path: adyen/callback
#           method: post

functions:
  graphql:
    # Make sure your file path is correct!
    # (e.g., if your file is in the root folder use server.graphqlHandler )
    # The format is: <FILENAME>.<HANDLER>
    handler: src/server.graphqlHandler
    events:
      - httpApi:
          path: /
          method: POST
      - httpApi:
          path: /
          method: GET

resources:
  Resources:
    # # Public files serving with S3 + CloudFront
    # StaticFilesBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: stop-waiting-app-static-files # Replace with a unique bucket name
    #     PublicAccessBlockConfiguration:
    #       BlockPublicAcls: false
    #       BlockPublicPolicy: false
    #       IgnorePublicAcls: false
    #       RestrictPublicBuckets: false

    # StaticFilesBucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: "!Ref StaticFilesBucket"
    #     PolicyDocument:
    #       Statement:
    #         - Effect: Allow
    #           Principal: "*"
    #           Action:
    #             - s3:GetObject
    #           Resource: "!Sub arn:aws:s3:::stop-waiting-app-static-files/*"

    # CloudFrontDistribution:
    #   Type: AWS::CloudFront::Distribution
    #   Properties:
    #     DistributionConfig:
    #       Origins:
    #         - DomainName: "!GetAtt StaticFilesBucket.DomainName"
    #           Id: S3Origin
    #           S3OriginConfig:
    #             OriginAccessIdentity: ""
    #       DefaultCacheBehavior:
    #         TargetOriginId: S3Origin
    #         ViewerProtocolPolicy: redirect-to-https
    #         AllowedMethods:
    #           - GET
    #           - HEAD
    #         CachedMethods:
    #           - GET
    #           - HEAD
    #         ForwardedValues:
    #           QueryString: false
    #           Cookies:
    #             Forward: none
    #       Enabled: true
    #       DefaultRootObject: index.html

    # Definition of the queue table where the entries are stored
    QueueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: security_code
            AttributeType: S
          - AttributeName: order
            AttributeType: N
        KeySchema:
          - AttributeName: security_code
            KeyType: HASH # Partition key
          - AttributeName: order
            KeyType: RANGE # Sort key
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:tableName}

    # Definition of the sequence table to track the last used order number
    SequenceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH # Partition key (unique identifier for the sequence)
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:sequenceTableName}

package:
  individually: true

build:
  esbuild:
    bundle: true
    minify: true
